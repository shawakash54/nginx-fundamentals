# Used to spawn more worker processes
worker_processes auto;

events{
    worker_connections 2560;
}

http {
    include mime.types;

    # Define limit zone
    # Below means rate limit will apply based on the servers name
    # limit_req_zone $server_name
    # Rate limiting will be applied per user using the IP limit
    # limit_req_zone $binary_remote_addr
    # Limit connections per request URI - 60 requests per minute. Nginx will implement rate limit evenly and thus preventing spikes
    limit_req_zone $request_uri zone=MYZONE:10m rate=60r/m;
    # Check with siege -v -r 2 -c 5 https://127.0.0.1/sample.jpg



    # Redirect all HTTP requests to HTTPS
    # Create a virtual host and redirect
    server {
        listen 80;
        server_name 127.0.0.1;
        return 301 https://$server_name$request_uri;
    }


    server {
        # listen 80;
        # Enabling SSL
        listen 443 ssl http2;
        server_name 127.0.0.1;
        root /Users/akashshaw/prac/nginx_demo/sites/demo/;
    
        index index.html;


        # Configuring the SSL certificate
        ssl_certificate /Users/akashshaw/prac/nginx_demo/ssl/self.crt;
        ssl_certificate_key /Users/akashshaw/prac/nginx_demo/ssl/self.key;

        # Disable SSL and encrypt using TLS only
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

        # Optimise cipher suits - which cipher suit should be used by TLS to encrpyt our connection
        # We have to tell Nginx that we are going to this by setting the ssl_prefer_server_ciphers to on
        ssl_prefer_server_ciphers on;
        # Each suit is separated by : and ! means not to use
        ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5;

        # Enable Diffie Hellman key exchange - DH Params
        # It allows the server to do key exchanges between the key and the server with perfect secracy
        ssl_dhparam /Users/akashshaw/prac/nginx_demo/ssl/dhparam.pem;

        # Enabling HSTS - Strict Transport Security
        # This tells the browser not to load anything over HTTP
        add_header Strict-Transport-Security "max-age=31536000" always;

        # Cache for SSL sessions
        # SSL connection requires a handshake between the client and the server. This SSL cache allows the server to cache 
        # the handshake for a set amount of time, thus improving SSL connection times
        # Default type is builtin - but this is limited to the worker processes and hence not that usefule
        # ssl_session_cache builtin
        # shared means the session cache is kepy in memory and can be accessed by any worker process
        ssl_session_cache shared:SSL:40m;
        ssl_session_timeout 4h;
        # In order to use the session cache without having the server access the cache, we can enable tickets
        # which basically means validate the client with a ticket issued by the server
        ssl_session_tickets on;


        location / {
            # applying the rate limit here
            # burst is burst allowance - to allow the server to accept incoming request 
            # Changing 1r/s to 1r/s + 5burst = 6 connections. But this doesn't mean the server will respond immediately, it will still have to adhere to 
            # 1r/s. Burst is used to traffic shapping, slowing down the traffic
            # nodelay - serve the burst request as quickly as possible still adhering to the rate limit
            limit_req zone=MYZONE burst=5 nodelay;
            try_files $uri $uri/ =404;
        }
     
        # regex match which will take priority over the prefix match above
        location ~\.php$ {
            # Pass PHP requests to the php-fpm service (fastcgi)
            include fastcgi.conf;
            fastcgi_pass   127.0.0.1:9000;
            # We can use fastcgi to pass this to an Unix socket created by php-fpm. It is like a port where the service can listen for binary data.
            # fastcgi_pass unix:/run/php/php7.1-fpm.sock;
        }
    }
}
