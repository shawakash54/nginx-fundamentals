# Used to spawn more worker processes
worker_processes auto;

# Configuring the process id location 
# pid /var/run/new_nginx.pid

events{
    worker_connections 2560;
}

http {
    include mime.types;

    # Configure microcache (fastcgi)
    # /tmp directory is cleared as soon as the system reboots
    # levels basically allows us to configure the depths of cache directory
    # keys_zone denotes the name of the cache and the size of the cache
    fastcgi_cache_path /tmp/nginx_cache levels=1:2 keys_zone=ZONE_1:100m inactive=60m;
    # format - https://     GET     domain.com      /blog/article
    # The key will hashed using md5
    fastcgi_cache_key "$scheme$request_method$host$request_uri";
    # To pass header to check if a request is served via cache
    add_header X-Cache $upstream_cache_status;
    server {
        listen 80;
        server_name 127.0.0.1;
        root /Users/akashshaw/prac/nginx_demo/sites/demo/;
    
        index index.php index.html;
        
        # Caching exceptions
        # Cache by default
        set $no_cache 0;

        # Check for cache bypass. Disabling caching if it is a post request
        # if ($request_method = POST)
        if ($arg_skipcache = 1) {
            set $no_cache 1;
        }

        location / {
            try_files $uri $uri/ =404;
        }
     
        # regex match which will take priority over the prefix match above
        location ~\.php$ {
            # Pass PHP requests to the php-fpm service (fastcgi)
            include fastcgi.conf;
            fastcgi_pass   127.0.0.1:9000;
            # We can use fastcgi to pass this to an Unix socket created by php-fpm. It is like a port where the service can listen for binary data.
            # fastcgi_pass unix:/run/php/php7.1-fpm.sock;


            # Enable caching
            fastcgi_cache ZONE_1;
            # Specify the response codes for which caching is valid
            fastcgi_cache_valid 200 60m;
            fastcgi_cache_valid 404 60m;
            # Deciding whether to cache or not based upon the variable no_cache
            fastcgi_cache_bypass $no_cache;
            fastcgi_no_cache $no_cache;
        }
    }
}
